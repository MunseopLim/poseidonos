diff --git lib/spdk-19.10/lib/event/reactor.c lib/spdk-19.10/lib/event/reactor.c
index fca5a80e..9bbf6fd7 100644
--- lib/spdk-19.10/lib/event/reactor.c
+++ lib/spdk-19.10/lib/event/reactor.c
@@ -43,6 +43,8 @@
 #include "spdk/env.h"
 #include "spdk/util.h"
 
+#include "air.h"
+
 #ifdef __linux__
 #include <sys/prctl.h>
 #endif
@@ -379,7 +381,17 @@ _spdk_reactor_run(void *arg)
 	_set_thread_name(thread_name);
 
 	while (1) {
-		uint64_t now;
+        AIRLOG(OV_TEST_NODE_0, 0, AIR_READ, 4096);
+        AIRLOG(OV_TEST_NODE_1, 0, AIR_READ, 4096);
+        AIRLOG(OV_TEST_NODE_2, 0, AIR_READ, 4096);
+        AIRLOG(OV_TEST_NODE_3, 0, AIR_READ, 4096);
+        AIRLOG(OV_TEST_NODE_4, 0, AIR_READ, 4096);
+
+        AIRLOG(OV_TEST_NODE_10, 0, 0, 0);
+        AIRLOG(OV_TEST_NODE_11, 0, 0, 0);
+        AIRLOG(OV_TEST_NODE_12, 0, 0, 0);
+		
+        uint64_t now;
 		int rc;
 
 		/* For each loop through the reactor, capture the time. This time
@@ -387,6 +399,9 @@ _spdk_reactor_run(void *arg)
 		now = spdk_get_ticks();
 
 		_spdk_event_queue_run_batch(reactor);
+        
+        AIRLOG(OV_TEST_NODE_10, 0, 1, 0);
+        AIRLOG(OV_TEST_NODE_11, 0, 1, 0);
 
 		TAILQ_FOREACH_SAFE(lw_thread, &reactor->threads, link, tmp) {
 			thread = spdk_thread_get_from_ctx(lw_thread);
@@ -397,8 +412,16 @@ _spdk_reactor_run(void *arg)
 				spdk_thread_destroy(thread);
 			}
 		}
-
-		if (g_reactor_state != SPDK_REACTOR_STATE_RUNNING) {
+        AIRLOG(OV_TEST_NODE_5, 0, AIR_WRITE, 4096);
+        AIRLOG(OV_TEST_NODE_6, 0, AIR_WRITE, 4096);
+        AIRLOG(OV_TEST_NODE_7, 0, AIR_WRITE, 4096);
+        AIRLOG(OV_TEST_NODE_8, 0, AIR_WRITE, 4096);
+        AIRLOG(OV_TEST_NODE_9, 0, AIR_WRITE, 4096);
+
+        AIRLOG(OV_TEST_NODE_10, 0, 2, 0);
+        AIRLOG(OV_TEST_NODE_11, 0, 2, 0);
+		
+        if (g_reactor_state != SPDK_REACTOR_STATE_RUNNING) {
 			break;
 		}
 
@@ -409,6 +432,10 @@ _spdk_reactor_run(void *arg)
 			}
 		}
 	}
+    
+    AIRLOG(OV_TEST_NODE_10, 0, 3, 0);
+    AIRLOG(OV_TEST_NODE_11, 0, 3, 0);
+    AIRLOG(OV_TEST_NODE_12, 0, 1, 0);
 
 	TAILQ_FOREACH_SAFE(lw_thread, &reactor->threads, link, tmp) {
 		thread = spdk_thread_get_from_ctx(lw_thread);
