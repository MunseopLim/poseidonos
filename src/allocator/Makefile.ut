## Define
UT_DEFINE = -DIBOF_CONFIG_USE_MOCK_FS

## Directories
IBOF_DIR = ../..
UT_INCLUDE = -I$(IBOF_DIR) -I$(IBOF_DIR)/lib
UT_OBJDIR_REL = ./obj_output
UT_OBJDIR = $(abspath $(UT_OBJDIR_REL))
# Ubuntu 18.04 issue
GTEST_LIB_DIR = /usr/local/lib

## Options
UT_CPPFLAGS = -g -Wall -Wunused -std=c++14 --coverage
UT_LFLAGS = -L$(GTEST_LIB_DIR) -lgmock_main -lpthread

## Execution file name
UTAPP0 = allocator_meta_ut
UTAPP1 = allocator_ut

## Source files
TEST_SRCS = \
$(IBOF_DIR)/src/allocator/allocator_meta_test.cpp \
$(IBOF_DIR)/src/allocator/allocator_test.cpp \
$(IBOF_DIR)/src/allocator/allocator.cpp \
$(IBOF_DIR)/src/allocator/allocator_address_info_mock.cpp \
$(IBOF_DIR)/src/allocator/allocator_meta_archive.cpp \
$(IBOF_DIR)/src/allocator/array_duty.cpp \
$(IBOF_DIR)/src/allocator/common_duty.cpp \
$(IBOF_DIR)/src/allocator/gc_duty.cpp \
$(IBOF_DIR)/src/allocator/io_duty.cpp \
$(IBOF_DIR)/src/allocator/journalmanager_duty.cpp \
$(IBOF_DIR)/src/allocator/main_duty.cpp \
$(IBOF_DIR)/src/allocator/stripe.cpp \
$(IBOF_DIR)/src/allocator/stripe_duty.cpp \
$(IBOF_DIR)/src/allocator/segment_info.cpp \
$(IBOF_DIR)/src/array/array_stub.cpp \
$(IBOF_DIR)/src/array/free_buffer_pool.cpp \
$(IBOF_DIR)/src/array/device/array_device.cpp \
$(IBOF_DIR)/src/array/device/array_device_list.cpp \
$(IBOF_DIR)/src/array/device/array_device_manager.cpp \
$(IBOF_DIR)/src/array/logger/array_exception.cpp \
$(IBOF_DIR)/src/array/logger/array_event.cpp \
$(IBOF_DIR)/src/array/meta/array_meta_manager.cpp \
$(IBOF_DIR)/src/array/meta/device_meta.cpp \
$(IBOF_DIR)/src/array/partition/partition_manager.cpp \
$(IBOF_DIR)/src/device/device_manager_stub.cpp \
$(IBOF_DIR)/src/device/ublock_device_stub.cpp \
$(IBOF_DIR)/src/io/general_io/affinity_manager_stub.cpp \
$(IBOF_DIR)/src/io/general_io/buffer_entry.cpp \
$(IBOF_DIR)/src/io/general_io/io_completion.cpp \
$(IBOF_DIR)/src/io/general_io/io_submit_handler.cpp \
$(IBOF_DIR)/src/io/general_io/ubio_stub.cpp \
$(IBOF_DIR)/src/lib/bitmap.cpp \
$(IBOF_DIR)/src/logger/ibof_event_id.cpp \
$(IBOF_DIR)/src/logger/logger.cpp \
$(IBOF_DIR)/src/master_context/config_manager.cpp \
$(IBOF_DIR)/src/master_context/mbr_manager_stub.cpp \
$(IBOF_DIR)/src/meta_file_intf/async_context.cpp \
$(IBOF_DIR)/src/meta_file_intf/meta_file_intf.cpp \
$(IBOF_DIR)/src/meta_file_intf/mock_file_intf.cpp \
$(IBOF_DIR)/src/mapper/mapper_stub.cpp \
$(IBOF_DIR)/src/scheduler/event.cpp \
$(IBOF_DIR)/src/scheduler/event_argument.cpp \
$(IBOF_DIR)/src/scheduler/event_scheduler_stub.cpp \
$(IBOF_DIR)/src/scheduler/io_dispatcher_stub.cpp \
$(IBOF_DIR)/src/scheduler/io_worker_stub.cpp \
$(IBOF_DIR)/src/state/state_context.cpp \
$(IBOF_DIR)/src/state/state_manager.cpp \
$(IBOF_DIR)/src/state/state_publisher.cpp \
$(IBOF_DIR)/src/sys_event/volume_event_stub.cpp \
$(IBOF_DIR)/src/volume/volume_list_stub.cpp \
$(IBOF_DIR)/src/volume/volume_manager_stub.cpp \

## Object files from source files
TARGET_OBJECTS = $(TEST_SRCS:.cpp=.o)


## Commands
ut: $(UTAPP0) $(UTAPP1)

$(UTAPP0): $(UT_OBJDIR) $(TARGET_OBJECTS)
	g++ $(UT_INCLUDE) $(UT_OBJDIR)/*.o $(UT_CPPFLAGS) -o $@ $(UT_LFLAGS)

$(UTAPP1): $(UT_OBJDIR) $(TARGET_OBJECTS)
	g++ $(UT_INCLUDE) $(UT_OBJDIR)/*.o $(UT_CPPFLAGS) -o $@ $(UT_LFLAGS)

$(UT_OBJDIR):
	mkdir -p $@

# Pattern rules
%.o: %.cpp
	@echo "Compling [$(<F)]..."
	@g++ $(UT_DEFINE) $(UT_INCLUDE) $(UT_CPPFLAGS) -c $< -o $(UT_OBJDIR)/$(notdir $@)

clean:
	rm -rf $(OUTPUT) $(UT_OBJDIR) Allocator*
